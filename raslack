#!/usr/bin/env node

'use strict';
const fs = require('fs');
const os = require('os');
const rp = require('request-promise');
const argv = require('minimist')(process.argv.slice(2));


let helpMessage = `
--channel | -c    account and channel to send to. e.g. accountNema.channelName
--text    | -t    the text of the slack message to send
--json            text representation of a slack message body to send. See slack docs for format
--help    | -g    this help message.
`
if (argv.help || argv.h) {
  console.log(helpMessage);
  process.exit(0);
}

const {
  loadConfig
} = require('./utils/config');
const {
  log
} = require('./utils/logger');

let channel;
try {
  channel = argv.channel ? argv.channel : argv.c;
} catch (e) {
  log.error(`Failed getting account and channel for posting. Did you pass them?\n ${e}`);
  process.exit(-1);
}

// load the config file
let configFilePath = `${os.homedir()}/.raslack/slackConfig.json`;
let config = loadConfig(configFilePath, channel);

let slackPostBody = {};

// set either the JSON payload, or the text of the JSON payload
if (argv.json) {
  try {
    slackPostBody = JSON.parse(argv.json);
  } catch (e) {
    log.error(`Caught an error trying to parse the passed JSON parameter \n ${e.message}`);
    process.exit(-1);
  }
} else if (argv.text || argv.t) {
  try {
    slackPostBody = {
      text: argv.text ? argv.text : argv.t
    };
  } catch (e) {
    log.error(`Caught an error processing text message\n ${e.message}`);
    process.exit(-1);
  }
}

// If we fell through, past the above 'if' conditions, then we failed to set a payload for the slack POST
if (slackPostBody === undefined) {
  log.error('You must pass, at least, text\n e.g. `raslack --text "some message"`');
  process.exit(-1);
}

// set some defaults
if (!slackPostBody.username) slackPostBody.username = 'raslack';
if (!slackPostBody.icon_emoji) slackPostBody.icon_emoji = ':gear:';


// prepare options and POST to the slack webhook from the config file
let slackPostOptions = {
  method: 'POST',
  url: config.webhook,
  body: slackPostBody,
  json: true
};

rp
  .post(slackPostOptions)
  .then(response => {
    log.info(`Slack response from post to ${config.slackChannel}: ${response}`);
  })
  .catch(error => {
    log.error(`Slack post to ${config.slackChannel}: ${error}`);
  });